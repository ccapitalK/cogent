--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include "bilbyfs.cogent"

fsm_init : (SysState, MountState!, FsmState take (..)) -> RR SysState FsmState (ErrCode, FsmState take(..)) 
fsm_init(ex, mount_st, fsm_st) =
  print_obj_super mount_st.super ;
  let nb_eb = mount_st.super.nb_eb
  in wordarray_create[U8] (ex, nb_eb)
  | Error ex -> (ex, Error (eNoMem, fsm_st))
  | Success (ex, used_eb) ->
    wordarray_create[U32] (ex, nb_eb)
    | Error ex ->
      let ex = wordarray_free[U8](ex, used_eb)
      in (ex, Error (eNoMem, fsm_st))
    | Success (ex, dirty_space) ->
      rbt_create[ObjId,GimNode] ex
      | Error ex ->
        let ex = wordarray_free[U8](ex, used_eb)
        and ex = wordarray_free[U32](ex, dirty_space)
        in (ex, Error (eNoMem, fsm_st))
      | Success (ex, gim) ->
        print_obj_super mount_st.super ;
        let nb_free_eb = mount_st.super.nb_eb - bilbyFsFirstLogEbNum
        in (ex, Success (fsm_st {used_eb, dirty_space, gim, nb_free_eb}))

fsm_clean : (SysState, FsmState) -> SysState
fsm_clean(ex, fsm_st {gim, dirty_space, used_eb, nb_free_eb}) =
  let ex = wordarray_free[U8](ex, used_eb)
  and ex = wordarray_free[U32](ex, dirty_space)
  and ex = rbt_free[ObjId,GimNode](ex, gim)
  in freeFsmState(ex, fsm_st)

fsm_check_free_space: (MountState!, FsmState!, U32) -> R () ErrCode
fsm_check_free_space(mount_st, fsm_st, osw_flags) =
  let n_gc = mount_st.super.nb_reserved_gc
  and n_del = mount_st.super.nb_reserved_del
  and n_free = fsm_st.nb_free_eb in
  if n_free < n_gc &&
     (osw_flags .&. ostoreWriteGC) == 0 then
    Error eNoSpc
  else -- n_del + n_gc should be sanity checked with deser
    if n_free < (n_del + n_gc) &&
       (osw_flags .&. ostoreWriteDel) == 0 &&
       (osw_flags .&. ostoreWriteGC) == 0 then
      Error eNoSpc
    else
      Success ()

mark_used_modifier: #{elem: U8, acc: U32, obsv: () } -> #{elem: U8, acc: U32}
mark_used_modifier #{elem=_, acc=nb_free_eb, obsv=_} =
 #{elem=1, acc=nb_free_eb - 1}

fsm_mark_used : (MountState!, FsmState, U32) -> FsmState
fsm_mark_used(mount_st, fsm_st {used_eb, nb_free_eb}, ebnum) =
-- We know that ebnum is always >= bilbyFsFirstLogEbNum and < mount_st.super.nb_eb
  let #{arr=used_eb, acc=nb_free_eb} = wordarray_modify[U8, U32, ()] #{arr=used_eb, idx=ebnum, f=mark_used_modifier, acc=nb_free_eb, obsv=()}
  in fsm_st {used_eb, nb_free_eb}

fsm_alloc_eb_loop_body: #{elem: U8, acc: U32, obsv: FsmState!} -> LoopResult U32 U32
fsm_alloc_eb_loop_body #{elem=is_used, acc=ebnum, obsv=fsm_st} =
  if is_used /= 0 then
    Iterate (ebnum+1)
  else
    Break ebnum
  
fsm_alloc_eb: (MountState!, FsmState, U32) -> RR FsmState U32 ErrCode
fsm_alloc_eb(mount_st, fsm_st, osw_flags) =
  fsm_check_free_space(mount_st, fsm_st, osw_flags) !fsm_st
  | Error err -> (fsm_st, Error err)
  | Success () ->
    wordarray_fold[U8, U32, FsmState, U32]
       #{arr=fsm_st.used_eb, frm=bilbyFsFirstLogEbNum, to=mount_st.super.nb_eb,
         f=fsm_alloc_eb_loop_body, acc=bilbyFsFirstLogEbNum, obsv=fsm_st} !fsm_st
    | Iterate _ ->
      cogent_assert False ; -- FIXME remove this
      (fsm_st, Error eNoSpc)
    | Break ebnum ->
      let fsm_st = fsm_mark_used(mount_st, fsm_st, ebnum)
      in (fsm_st, Success ebnum)

mark_dirty_modifier: #{elem: U32, acc: (), obsv: U32! } -> #{elem: U32, acc: ()}
mark_dirty_modifier #{elem=dirt, acc=_, obsv=len} =
  #{elem=dirt + len, acc=()}

type RbtGim = Rbt ObjId GimNode

{-# inline set_gim_node #-}
set_gim_node: (RbtGimNode, ObjId, U16, U64) -> RbtGimNode
set_gim_node(node, oid, count, sqnum) =
  let node = rbtnode_put_key[ObjId, GimNode](node, oid)
  in rbtnode_put_val[ObjId, GimNode](node, #{count,sqnum})

gim_modifier: #{elem: RbtGimNode, acc:(), obsv:(ObjId, U64, U16)!} -> (RbtGimNode, ())
gim_modifier #{elem=node, acc=_, obsv=(oid, sqnum, count)} =
  (set_gim_node(node, oid, count, sqnum), ())

fsm_mark_ebnum_dirty: (FsmState, U32, U32) -> FsmState
fsm_mark_ebnum_dirty(fsm_st {dirty_space}, ebnum, len) =
  let #{arr=dirty_space, acc=()} = wordarray_modify[U32, (), U32] #{arr=dirty_space, idx=ebnum, f=mark_dirty_modifier, acc=(), obsv=len}
  in fsm_st {dirty_space}

fsm_mark_dirty_use: #{elem:RbtGimNode, acc:(SysState, Rbt ObjId GimNode), obsv:(ObjId, U64, U16)} -> (SysState, Rbt ObjId GimNode)
fsm_mark_dirty_use #{elem=node, acc=(ex, gim), obsv=(oid, sqnum, count)} =
  let #{rbt=gim, optnode, acc=_} = rbt_modify[ObjId, GimNode, (), (ObjId, U64, U16)]
                                     #{rbt=gim, key=oid, f=gim_modifier, node, acc=(), obsv=(oid, sqnum, count)}
  and ex = freeOptRbtNode[ObjId, GimNode](ex, optnode)
  in (ex, gim)
  
fsm_mark_dirty : (SysState, MountState!, FsmState, AllocPool RbtGimNode, ObjId, ObjAddr!) -> (SysState, FsmState, AllocPool RbtGimNode)
fsm_mark_dirty(ex, mount_st, fsm_st, gimpool, oid, oaddr) =
  let fsm_st = fsm_mark_ebnum_dirty(fsm_st, oaddr.ebnum, oaddr.len)
  and fsm_st {gim} = fsm_st
  in if oid /= nilObjId then
    let (gimpool, (ex, gim)) = allocpool_use[RbtGimNode, (SysState, Rbt ObjId GimNode), (ObjId, U64, U16)]
                                 #{pool=gimpool, f=fsm_mark_dirty_use, acc=(ex, gim), obsv=(oid, oaddr.sqnum, 1)}
    in (ex, fsm_st {gim}, gimpool)
  else
    (ex, fsm_st {gim}, gimpool)

fsm_mark_dirty_recycle: (SysState, MountState!, FsmState, ObjId, ObjAddr!, RbtGimNode) -> (SysState, FsmState)
fsm_mark_dirty_recycle(ex, mount_st, fsm_st, oid, oaddr, node) =
  let fsm_st = fsm_mark_ebnum_dirty(fsm_st, oaddr.ebnum, oaddr.len)
  and fsm_st {gim} = fsm_st
  and #{rbt=gim, optnode, acc=_} = rbt_modify[ObjId, GimNode, (), (ObjId, U64, U16)]
                                     #{rbt=gim, key=oid, f=gim_modifier, node, acc=(), obsv=(oid, oaddr.sqnum, 1)}
  and ex = freeOptRbtNode[ObjId, GimNode](ex, optnode)
  in (ex, fsm_st {gim})
  
fsm_set_garbage : (SysState, MountState!, FsmState, AllocPool RbtGimNode, ObjId, U64, U16) -> (SysState, FsmState, AllocPool RbtGimNode)
fsm_set_garbage(ex, mount_st, fsm_st, gimpool, oid, sqnum, count) =
  let fsm_st {gim} = fsm_st
  and (gimpool, (ex, gim)) = allocpool_use[RbtGimNode, (SysState, Rbt ObjId GimNode), (ObjId, U64, U16)]
                               #{pool=gimpool, f=fsm_mark_dirty_use, acc=(ex, gim), obsv=(oid, sqnum, count)}
  in (ex, fsm_st {gim}, gimpool)
